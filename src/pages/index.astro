---
import BaseLayout from '../layouts/BaseLayout.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import { getCollection } from 'astro:content';
import { FormattedDate } from '../components/FormattedDate.astro';
import { render } from 'astro:content';
import { Image } from 'astro:assets';
import BaseHead from '../components/BaseHead.astro';
import { calculateReadingTime } from '../utils/readingTime';
import { sanitizeHtml } from '../utils/sanitizeHtml';
import Metadata from '../components/Metadata.astro';

const posts = (await getCollection('posts')).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

async function getPostPreview(post: any) {
  const content = post.body;
  const readMoreIndex = content.indexOf('<!-- more -->');
  const preview = readMoreIndex === -1 ? content : content.slice(0, readMoreIndex);

  try {
    const { Content } = await render({
      collection: 'posts',
      id: post.id,
      body: preview,
      data: post.data,
    });
    return Content;
  } catch (error) {
    console.error('Error rendering preview:', error);
    return preview;
  }
}
---

<BaseLayout title={SITE_TITLE} description={SITE_DESCRIPTION}>
  <div class="posts">
    {
      posts.map(async post => {
        const Preview = await getPostPreview(post);
        return (
          <article>
            <a href={`/${post.id}`} class="post-link no-underline">
              <div class="post-content">
                
                  <Metadata 
                    date={post.data.pubDate} 
                    readingTime={calculateReadingTime(post.body || '')}
                  />
                <h2>{post.data.title}</h2>
                {post.body && (
                  <>
                    <div class="content">
                      {typeof Preview === 'function' ? <Preview /> : <div set:html={Preview} />}
                    </div>
                    <div class="description">
                      {post.data.description ? sanitizeHtml(post.data.description) : ''}
                    </div>
                  </>
                )}
              </div>
              {post.data.heroImage && (
                <Image
                  src={post.data.heroImage}
                  alt={post.data.title}
                  width={200}
                  height={133}
                  class="hero-image"
                  loading="eager"
                />
              )}
            </a>
          </article>
        );
      })
    }
  </div>

  <style>
    .posts {
      list-style: none;
      padding: 0;
      margin: 0;
      width: 100%;
    }

    article {
      padding-bottom: 3rem;
    }

    .post-link {
      display: grid;
      grid-template-columns: 1fr auto;
      gap: 1.5rem;
      align-items: start;
      text-decoration: none;
      color: inherit;
      padding: var(--space-2xs);
      margin: calc(-1 * var(--space-2xs));
      border-radius: 8px;
    }

    .post-link:hover {
      color: inherit;
    }

    article .post-content {
      grid-column: 1;
    }

    article .hero-image {
      grid-column: 2;
      width: var(--space-2xl);
      height: calc(var(--space-2xl) / 1.5);
      object-fit: cover;
      border-radius: 4px;
      position: relative;
      transition: transform 0.3s ease;
      transform: rotate(0deg);
    }

    article:nth-child(3n + 1) .post-link:hover .hero-image {
      transform: rotate(-2deg) scale(1.02);
    }

    article:nth-child(3n + 2) .post-link:hover .hero-image {
      transform: rotate(3deg) scale(1.02);
    }

    article:nth-child(3n + 3) .post-link:hover .hero-image {
      transform: rotate(-1deg) scale(1.02);
    }

    article h2 {
      margin: 0 0 var(--space-2xs) 0;
      transition: color 0.2s ease;
      color: var(--theme-text);
    }

    article h2:hover {
      color: var(--theme-accent);
    }

    .post-link:hover h2 {
      color: var(--theme-accent);
    }

    article .metadata {
      display: flex;
      align-items: center;
      gap: var(--space-3xs);
    }

    article .content {
      margin: var(--space-2xs) 0;
      font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }

    article .content :global(p) {
      margin: var(--space-2xs) 0;
    }

    article .content :global(p:first-child) {
      margin-top: 0;
    }

    article .meta {
      display: flex;
      align-items: center;
      gap: var(--space-xs);
      margin-top: var(--space-2xs);
      color: var(--theme-secondary);
      font-size: var(--step--1);
    }

    article .meta em {
      color: var(--theme-secondary);
    }

    article .read-more {
      display: inline-flex;
      align-items: center;
      color: var(--theme-accent);
      border-bottom: none;
      padding-bottom: 0;
    }

    article .read-more:hover {
      text-decoration: none;
      border-bottom: none;
    }

    article .description {
    }
  </style>
</BaseLayout>
